import React, { useState } from "react";
import classNames from "../utils/class-names";
import useInterval from "../utils/useInterval";
import {minutesToDuration, secondsToDuration} from "../utils/duration"

function Pomodoro() {
  // Timer starts out paused
  const [isTimerRunning, setIsTimerRunning] = useState(false);
  const [focusTime, setFocusTime] = useState(25);
  const [breakTime, setBreakTime] = useState(5)
  const [activeTime, setActiveTime] = useState(focusTime*60)
  const [completedPercentage, setCompletedPercentage] = useState(0)
  const [formatedPercentage, setFormatedPercentage] = useState('0')
  const [focusOrBreak, setFocusOrBreak] = useState(true);
  const [paused, setPaused] = useState(false);
  const [stopped, setStopped] = useState(true);
  const [timeRan, setTimeRan] = useState(false);
  
  const decreaseFocusTime = () => {
		if(focusTime <= 5){
		}else{
			setFocusTime((currentTime) => currentTime -5)
			setActiveTime((currentTime) => currentTime- (5*60) )
			return focusTime
		}
  }
  
  const increaseFocusTime =() => {
	  if(focusTime >= 60){
	  }else{
			setFocusTime((currentTime) => currentTime +5)
			setActiveTime((currentTime) => currentTime+ (5*60) )
			return focusTime
		}
  }
  
  const adjustActiveTime = (breakOrFocus) => {
	  setActiveTime((currentTime) => currentTime = breakOrFocus *60)
  }
  
  const decreaseBreakTime = () => {
	  if(breakTime <= 1){
	  }else{
			setBreakTime((currentTime) => currentTime -1)
			return breakTime
		}
  }
  
  const increaseBreakTime = () => {
	  if(breakTime >= 15){
	  }else{
			setBreakTime((currentTime) => currentTime +1)
			return breakTime
		}
  }
  
  useInterval(
    () => {
      // ToDo: Implement what should happen when the timer is running
	  if(isTimerRunning){
		  //decrease active counter by 1sec per sec
		  setActiveTime((currentTime) => currentTime-1)
		  if(activeTime <=0){
			  if(focusOrBreak){
				adjustActiveTime(breakTime)
				setFocusOrBreak(!focusOrBreak)
			  }else{
				  adjustActiveTime(focusTime)
				  setFocusOrBreak(!focusOrBreak)
			  }
		  }
		  
		  setCompletedPercentage((currentPercentage) => {
				//find what percentage we are completed by
				currentPercentage = ((1-(activeTime/ ((focusOrBreak ? focusTime : breakTime)*60))) *100).toFixed(2)
				//format completed percentage
				setFormatedPercentage(currentPercentage)
			});
			console.log(formatedPercentage)
	  }
    },
    isTimerRunning ? 1000 : null
  );

  function playPause() {
    setIsTimerRunning((prevState) => !prevState);
	setPaused((prevState) => !prevState);
	setStopped((prevState) => prevState = false);
	setTimeRan((prevState) => prevState = true);
  }
  
  function stop() {
	  adjustActiveTime(focusTime);
	  playPause();
	  setStopped((prevState) => prevState = true);
	  setTimeRan((prevState) => prevState = false);
  }

  return (
    <div className="pomodoro">
      <div className="row">
        <div className="col">
          <div className="input-group input-group-lg mb-2">
            <span className="input-group-text" data-testid="duration-focus">
              {/* TODO: Update this text to display the current focus session duration */}
              Focus Duration: {minutesToDuration(focusTime)}
            </span>
            <div className="input-group-append">
              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}
              <button
				onClick={decreaseFocusTime}
                type="button"
                className="btn btn-secondary"
                data-testid="decrease-focus"
				disabled={timeRan}
              >
                <span className="oi oi-minus" />
              </button>
              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}
              <button
				onClick={increaseFocusTime}
                type="button"
                className="btn btn-secondary"
                data-testid="increase-focus"
				disabled={timeRan}
              >
                <span className="oi oi-plus" />
              </button>
            </div>
          </div>
        </div>
        <div className="col">
          <div className="float-right">
            <div className="input-group input-group-lg mb-2">
              <span className="input-group-text" data-testid="duration-break">
                {/* TODO: Update this text to display the current break session duration */}
                Break Duration: {minutesToDuration(breakTime)}
              </span>
              <div className="input-group-append">
                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}
                <button
				  onClick={decreaseBreakTime}
                  type="button"
                  className="btn btn-secondary"
                  data-testid="decrease-break"
				  disabled={timeRan}
                >
                  <span className="oi oi-minus" />
                </button>
                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}
                <button
				onClick={increaseBreakTime}
                  type="button"
                  className="btn btn-secondary"
                  data-testid="increase-break"
				  disabled={timeRan}
                >
                  <span className="oi oi-plus" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div className="row">
        <div className="col">
          <div
            className="btn-group btn-group-lg mb-2"
            role="group"
            aria-label="Timer controls"
          >
            <button
              type="button"
              className="btn btn-primary"
              data-testid="play-pause"
              title="Start or pause timer"
              onClick={playPause}
            >
              <span
                className={classNames({
                  oi: true,
                  "oi-media-play": !isTimerRunning,
                  "oi-media-pause": isTimerRunning,
                })}
              />
            </button>
            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}
            <button
              type="button"
              className="btn btn-secondary"
              title="Stop the session"
			  onClick={stop}
			  disabled={!isTimerRunning}
            >
              <span className="oi oi-media-stop" />
            </button>
          </div>
        </div>
      </div>
      <div>
        {/* TODO: This area should show only when a focus or break session is running or pauses */}
        <div className="row mb-2" style={stopped ? {opacity: 0} : {opacity: 100}}>
          <div className="col">
            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}
<h2 data-testid="session-title">{focusOrBreak ? 'Focusing' : 'On Break'} for {focusOrBreak ? minutesToDuration(focusTime) : minutesToDuration(breakTime)} minutes</h2>
            {/* TODO: Update message below to include time remaining in the current session */}
            <p className="lead" data-testid="session-sub-title">
			{secondsToDuration(activeTime)} remaining
            </p>
			<h3 style={paused ? {opacity: 0} : {opacity: 100}}>Paused</h3>
          </div>
        </div>
        <div className="row mb-2">
          <div className="col" style={stopped ? {opacity: 0} : {opacity: 100}}>
            <div className="progress" style={{ height: "20px" }}>
              <div
                className="progress-bar"
                role="progressbar"
                aria-valuemin="0"
                aria-valuemax="100"
                aria-valuenow={`${formatedPercentage}` }// TODO: Increase aria-valuenow as elapsed time increases
                style={{ width: `${formatedPercentage}%` }} // TODO: Increase width % as elapsed time increases
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Pomodoro;