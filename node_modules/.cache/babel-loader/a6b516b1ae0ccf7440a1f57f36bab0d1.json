{"ast":null,"code":"var _jsxFileName = \"D:\\\\colty\\\\Documents\\\\coding_projects\\\\Thinkful\\\\FrontEnd\\\\RenderingWithReact\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport FocusDuration from './FocusDuration';\nimport BreakDuration from './BreakDuration';\nimport DisplayTime from './DisplayTime';\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusTime, setFocusTime] = useState(25);\n  const [breakTime, setBreakTime] = useState(5);\n  const [activeTime, setActiveTime] = useState(focusTime * 60);\n  const [completedPercentage, setCompletedPercentage] = useState(0);\n  const [formatedPercentage, setFormatedPercentage] = useState('0');\n  const [focusOrBreak, setFocusOrBreak] = useState(true);\n  const [paused, setPaused] = useState(false);\n  const [stopped, setStopped] = useState(true);\n  const [timeRan, setTimeRan] = useState(false);\n\n  const decreaseFocusTime = () => {\n    if (focusTime <= 5) {} else {\n      setFocusTime(currentTime => currentTime - 5);\n      setActiveTime(currentTime => currentTime - 5 * 60);\n      return focusTime;\n    }\n  };\n\n  const increaseFocusTime = () => {\n    if (focusTime >= 60) {} else {\n      setFocusTime(currentTime => currentTime + 5);\n      setActiveTime(currentTime => currentTime + 5 * 60);\n      return focusTime;\n    }\n  };\n\n  const adjustActiveTime = breakOrFocus => {\n    setActiveTime(currentTime => currentTime = breakOrFocus * 60);\n  };\n\n  const decreaseBreakTime = () => {\n    if (breakTime <= 1) {} else {\n      setBreakTime(currentTime => currentTime - 1);\n      return breakTime;\n    }\n  };\n\n  const increaseBreakTime = () => {\n    if (breakTime >= 15) {} else {\n      setBreakTime(currentTime => currentTime + 1);\n      return breakTime;\n    }\n  };\n\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    if (isTimerRunning) {\n      //decrease active counter by 1sec per sec\n      setActiveTime(currentTime => currentTime - 1);\n\n      if (activeTime <= 0) {\n        if (focusOrBreak) {\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n          adjustActiveTime(breakTime);\n          setFocusOrBreak(!focusOrBreak);\n        } else {\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n          adjustActiveTime(focusTime);\n          setFocusOrBreak(!focusOrBreak);\n        }\n      }\n\n      setCompletedPercentage(currentPercentage => {\n        //find what percentage we are completed by\n        currentPercentage = ((1 - activeTime / ((focusOrBreak ? focusTime : breakTime) * 60)) * 100).toFixed(2); //format completed percentage\n\n        setFormatedPercentage(currentPercentage);\n      });\n      console.log(formatedPercentage);\n    }\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n    setPaused(prevState => !prevState);\n    setStopped(prevState => prevState = false);\n    setTimeRan(prevState => prevState = true);\n  }\n\n  function stop() {\n    adjustActiveTime(focusTime);\n    playPause();\n    setStopped(prevState => prevState = true);\n    setTimeRan(prevState => prevState = false);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    focusTime: focusTime,\n    decreaseFocusTime: decreaseFocusTime,\n    timeRan: timeRan,\n    increaseFocusTime: increaseFocusTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BreakDuration, {\n    decreaseBreakTime: decreaseBreakTime,\n    breakTime: breakTime,\n    timeRan: timeRan,\n    increaseBreakTime: increaseBreakTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    title: \"Stop the session\",\n    onClick: stop,\n    disabled: !isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(DisplayTime, {\n    focusOrBreak: focusOrBreak,\n    breakTime: breakTime,\n    focusTime: focusTime,\n    timeRan: timeRan,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["D:/colty/Documents/coding_projects/Thinkful/FrontEnd/RenderingWithReact/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","minutesToDuration","secondsToDuration","FocusDuration","BreakDuration","DisplayTime","Pomodoro","isTimerRunning","setIsTimerRunning","focusTime","setFocusTime","breakTime","setBreakTime","activeTime","setActiveTime","completedPercentage","setCompletedPercentage","formatedPercentage","setFormatedPercentage","focusOrBreak","setFocusOrBreak","paused","setPaused","stopped","setStopped","timeRan","setTimeRan","decreaseFocusTime","currentTime","increaseFocusTime","adjustActiveTime","breakOrFocus","decreaseBreakTime","increaseBreakTime","Audio","play","currentPercentage","toFixed","console","log","playPause","prevState","stop","oi"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport {minutesToDuration, secondsToDuration} from \"../utils/duration\"\nimport FocusDuration from './FocusDuration'\nimport BreakDuration from './BreakDuration'\nimport DisplayTime from './DisplayTime'\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusTime, setFocusTime] = useState(25);\n  const [breakTime, setBreakTime] = useState(5)\n  const [activeTime, setActiveTime] = useState(focusTime*60)\n  const [completedPercentage, setCompletedPercentage] = useState(0)\n  const [formatedPercentage, setFormatedPercentage] = useState('0')\n  const [focusOrBreak, setFocusOrBreak] = useState(true);\n  const [paused, setPaused] = useState(false);\n  const [stopped, setStopped] = useState(true);\n  const [timeRan, setTimeRan] = useState(false);\n  \n  \n  const decreaseFocusTime = () => {\n\t\tif(focusTime <= 5){\n\t\t}else{\n\t\t\tsetFocusTime((currentTime) => currentTime -5)\n\t\t\tsetActiveTime((currentTime) => currentTime- (5*60) )\n\t\t\treturn focusTime\n\t\t}\n  }\n  \n  const increaseFocusTime =() => {\n\t  if(focusTime >= 60){\n\t  }else{\n\t\t\tsetFocusTime((currentTime) => currentTime +5)\n\t\t\tsetActiveTime((currentTime) => currentTime+ (5*60) )\n\t\t\treturn focusTime\n\t\t}\n  }\n  \n  const adjustActiveTime = (breakOrFocus) => {\n\t  setActiveTime((currentTime) => currentTime = breakOrFocus *60)\n  }\n  \n  const decreaseBreakTime = () => {\n\t  if(breakTime <= 1){\n\t  }else{\n\t\t\tsetBreakTime((currentTime) => currentTime -1)\n\t\t\treturn breakTime\n\t\t}\n  }\n  \n  const increaseBreakTime = () => {\n\t  if(breakTime >= 15){\n\t  }else{\n\t\t\tsetBreakTime((currentTime) => currentTime +1)\n\t\t\treturn breakTime\n\t\t}\n  }\n  \n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n\t  if(isTimerRunning){\n\t\t  //decrease active counter by 1sec per sec\n\t\t  setActiveTime((currentTime) => currentTime-1)\n\t\t  if(activeTime <=0){\n\t\t\t  if(focusOrBreak){\n\t\t\t\tnew Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n\t\t\t\tadjustActiveTime(breakTime)\n\t\t\t\tsetFocusOrBreak(!focusOrBreak)\n\t\t\t  }else{\n\t\t\t\t  new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n\t\t\t\t  adjustActiveTime(focusTime)\n\t\t\t\t  setFocusOrBreak(!focusOrBreak)\n\t\t\t  }\n\t\t  }\n\t\t  \n\t\t  setCompletedPercentage((currentPercentage) => {\n\t\t\t\t//find what percentage we are completed by\n\t\t\t\tcurrentPercentage = ((1-(activeTime/ ((focusOrBreak ? focusTime : breakTime)*60))) *100).toFixed(2)\n\t\t\t\t//format completed percentage\n\t\t\t\tsetFormatedPercentage(currentPercentage)\n\t\t\t});\n\t\t\tconsole.log(formatedPercentage)\n\t  }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n\tsetPaused((prevState) => !prevState);\n\tsetStopped((prevState) => prevState = false);\n\tsetTimeRan((prevState) => prevState = true);\n  }\n  \n  function stop() {\n\t  adjustActiveTime(focusTime);\n\t  playPause();\n\t  setStopped((prevState) => prevState = true);\n\t  setTimeRan((prevState) => prevState = false);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <FocusDuration focusTime={focusTime} decreaseFocusTime={decreaseFocusTime} timeRan={timeRan} increaseFocusTime={increaseFocusTime} />\n        </div>\n        <div className=\"col\">\n          <BreakDuration decreaseBreakTime={decreaseBreakTime} breakTime={breakTime} timeRan={timeRan} increaseBreakTime={increaseBreakTime}/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n\t\t\t  onClick={stop}\n\t\t\t  disabled={!isTimerRunning}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <DisplayTime focusOrBreak={focusOrBreak} breakTime={breakTime} focusTime={focusTime} timeRan={timeRan} />\n    </div>\n  );\n}\n\nexport default Pomodoro;"]},"metadata":{},"sourceType":"module"}